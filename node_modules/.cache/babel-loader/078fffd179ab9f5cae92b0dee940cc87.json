{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Monzer Mohammed\\\\Desktop\\\\WebDevReact\\\\web-dev-react\\\\src\\\\Counter.jsx\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: props.initialCounter\n    };\n  }\n\n  render() {\n    const App = {\n      width: \"10%\",\n      margin: \"0 auto\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: App,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.changeCount(-1),\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: this.state.count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.changeCount(1),\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  }\n\n  changeCount(amount) {\n    // this.setState({ count: this.state.count + amount });\n\n    /* If you wanna make your code Async */\n    this.setState(prevState => {\n      return {\n        count: prevState.count + amount\n      };\n    });\n    this.setState(prevState => {\n      return {\n        count: prevState.count + amount\n      };\n    });\n  }\n\n}\n/*\r\n\r\n    - Passing a prop from a functiona component to a class component using this.props.thePropName\r\n    - Use handelers functions always outside the render component (don't use const or let for the definition)\r\n\r\n*/","map":{"version":3,"sources":["C:/Users/Monzer Mohammed/Desktop/WebDevReact/web-dev-react/src/Counter.jsx"],"names":["React","Component","Counter","constructor","props","state","count","initialCounter","render","App","width","margin","changeCount","amount","setState","prevState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,eAAe,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAC7CE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAEF,KAAK,CAACG;AADF,KAAb;AAGD;;AACDC,EAAAA,MAAM,GAAG;AACP,UAAMC,GAAG,GAAG;AACVC,MAAAA,KAAK,EAAE,KADG;AAEVC,MAAAA,MAAM,EAAE;AAFE,KAAZ;AAKA,wBACE;AAAK,MAAA,KAAK,EAAEF,GAAZ;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKG,WAAL,CAAiB,CAAC,CAAlB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAO,KAAKP,KAAL,CAAWC;AAAlB;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKM,WAAL,CAAiB,CAAjB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAEDA,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB;;AAEA;AACA,SAAKC,QAAL,CAAeC,SAAD,IAAe;AAC3B,aAAO;AAAET,QAAAA,KAAK,EAAES,SAAS,CAACT,KAAV,GAAkBO;AAA3B,OAAP;AACD,KAFD;AAGA,SAAKC,QAAL,CAAeC,SAAD,IAAe;AAC3B,aAAO;AAAET,QAAAA,KAAK,EAAES,SAAS,CAACT,KAAV,GAAkBO;AAA3B,OAAP;AACD,KAFD;AAGD;;AAjC4C;AAoC/C;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Counter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      count: props.initialCounter,\r\n    };\r\n  }\r\n  render() {\r\n    const App = {\r\n      width: \"10%\",\r\n      margin: \"0 auto\",\r\n    };\r\n\r\n    return (\r\n      <div style={App}>\r\n        <button onClick={() => this.changeCount(-1)}>-</button>\r\n        <span>{this.state.count}</span>\r\n        <button onClick={() => this.changeCount(1)}>+</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  changeCount(amount) {\r\n    // this.setState({ count: this.state.count + amount });\r\n\r\n    /* If you wanna make your code Async */\r\n    this.setState((prevState) => {\r\n      return { count: prevState.count + amount };\r\n    });\r\n    this.setState((prevState) => {\r\n      return { count: prevState.count + amount };\r\n    });\r\n  }\r\n}\r\n\r\n/*\r\n\r\n    - Passing a prop from a functiona component to a class component using this.props.thePropName\r\n    - Use handelers functions always outside the render component (don't use const or let for the definition)\r\n\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}