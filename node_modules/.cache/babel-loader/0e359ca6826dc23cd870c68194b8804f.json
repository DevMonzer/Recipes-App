{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Monzer Mohammed\\\\Desktop\\\\WebDevReact\\\\web-dev-react\\\\src\\\\components\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport RecipeList from \"./RecipeList\";\nimport RecipeEdit from \"./RecipeEdit\";\nimport \"../css/app.css\";\nimport uuidv4 from \"uuid/v4\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LOCAL_STORAGE_KEY = \"cookingWithReact.recipes\"; // Using Context [it's similar to Redux] to avoid props drilling\n\nexport const RecipeContext = /*#__PURE__*/React.createContext();\n\nfunction App() {\n  _s();\n\n  // selectedRecipeId is for hanleing the Edit state\n  const [selectedRecipeId, setSelectedRecipeId] = useState();\n  const [recipes, setRecipes] = useState(sampleRecipes);\n  const selectedRecipe = recipes.find(recipe => recipe.id === selectedRecipeId); // Local Storage Settings\n  // Get the data  from the localStorage\n\n  useEffect(() => {\n    const recipeJSON = localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (recipeJSON != null) setRecipes(JSON.parse(recipeJSON));\n  }, []); // Editing the data  inside the localStorage based on user actions\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(recipes));\n  }, [recipes]);\n  const recipeContextValue = {\n    handleRecipeAdd,\n    handleRecipeDelete,\n    handleRecipeSelect,\n    handleRecipeChange\n  }; // This function allows us to change our recipes\n\n  function handleRecipeChange(id, recipe) {\n    const newRcipes = [...recipes];\n    const index = newRcipes.findIndex(r => r.id === id);\n    newRcipes[index] = recipe;\n    setRecipes(newRcipes);\n  } // Handle the edit\n\n\n  function handleRecipeSelect(id) {\n    setSelectedRecipeId(id);\n  }\n\n  function handleRecipeAdd() {\n    const newRecipe = {\n      id: uuidv4(),\n      name: \"\",\n      servings: 1,\n      cookTime: \"\",\n      instructions: \"\",\n      ingredients: [{\n        id: uuidv4(),\n        name: \"\",\n        amount: \"\"\n      }]\n    };\n    setSelectedRecipeId(newRecipe.id);\n    setRecipes([...recipes, newRecipe]);\n  } // Return all recipes expect the one we matched\n\n\n  function handleRecipeDelete(id) {\n    if (selectedRecipeId != null && selectedRecipeId === id) setRecipes(recipes.filter(recipe => recipe.id !== id));\n  }\n\n  return /*#__PURE__*/_jsxDEV(RecipeContext.Provider, {\n    value: recipeContextValue,\n    children: [/*#__PURE__*/_jsxDEV(RecipeList, {\n      recipes: recipes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), selectedRecipe && /*#__PURE__*/_jsxDEV(RecipeEdit, {\n      recipe: selectedRecipe\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"A/squfVYNSH4Efj0G7dX3TtlGVU=\");\n\n_c = App;\nconst sampleRecipes = [{\n  id: 1,\n  name: \"Plain Chicken\",\n  servings: 3,\n  cookTime: \"1:45\",\n  instructions: \"1. Put salt on chicken\\n2. Put chicken in oven\\n3. Eat chicken\",\n  ingredients: [{\n    id: 1,\n    name: \"Chicken\",\n    amount: \"2 Pounds\"\n  }, {\n    id: 2,\n    name: \"Salt\",\n    amount: \"1 Tbs\"\n  }]\n}, {\n  id: 2,\n  name: \"Plain Pork\",\n  servings: 5,\n  cookTime: \"0:45\",\n  instructions: \"1. Put paprika on pork\\n2. Put pork in oven\\n3. Eat pork\",\n  ingredients: [{\n    id: 1,\n    name: \"Pork\",\n    amount: \"3 Pounds\"\n  }, {\n    id: 2,\n    name: \"Paprika\",\n    amount: \"2 Tbs\"\n  }]\n}];\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Monzer Mohammed/Desktop/WebDevReact/web-dev-react/src/components/App.js"],"names":["React","useState","useEffect","RecipeList","RecipeEdit","uuidv4","LOCAL_STORAGE_KEY","RecipeContext","createContext","App","selectedRecipeId","setSelectedRecipeId","recipes","setRecipes","sampleRecipes","selectedRecipe","find","recipe","id","recipeJSON","localStorage","getItem","JSON","parse","setItem","stringify","recipeContextValue","handleRecipeAdd","handleRecipeDelete","handleRecipeSelect","handleRecipeChange","newRcipes","index","findIndex","r","newRecipe","name","servings","cookTime","instructions","ingredients","amount","filter"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport RecipeList from \"./RecipeList\";\nimport RecipeEdit from \"./RecipeEdit\";\nimport \"../css/app.css\";\n\nimport uuidv4 from \"uuid/v4\";\nconst LOCAL_STORAGE_KEY = \"cookingWithReact.recipes\";\n\n// Using Context [it's similar to Redux] to avoid props drilling\nexport const RecipeContext = React.createContext();\n\nfunction App() {\n  // selectedRecipeId is for hanleing the Edit state\n  const [selectedRecipeId, setSelectedRecipeId] = useState();\n  const [recipes, setRecipes] = useState(sampleRecipes);\n  const selectedRecipe = recipes.find(\n    (recipe) => recipe.id === selectedRecipeId\n  );\n\n  // Local Storage Settings\n  // Get the data  from the localStorage\n  useEffect(() => {\n    const recipeJSON = localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (recipeJSON != null) setRecipes(JSON.parse(recipeJSON));\n  }, []);\n\n  // Editing the data  inside the localStorage based on user actions\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(recipes));\n  }, [recipes]);\n\n  const recipeContextValue = {\n    handleRecipeAdd,\n    handleRecipeDelete,\n    handleRecipeSelect,\n    handleRecipeChange,\n  };\n\n  // This function allows us to change our recipes\n  function handleRecipeChange(id, recipe) {\n    const newRcipes = [...recipes];\n    const index = newRcipes.findIndex((r) => r.id === id);\n    newRcipes[index] = recipe;\n    setRecipes(newRcipes);\n  }\n\n  // Handle the edit\n  function handleRecipeSelect(id) {\n    setSelectedRecipeId(id);\n  }\n\n  function handleRecipeAdd() {\n    const newRecipe = {\n      id: uuidv4(),\n      name: \"\",\n      servings: 1,\n      cookTime: \"\",\n      instructions: \"\",\n      ingredients: [{ id: uuidv4(), name: \"\", amount: \"\" }],\n    };\n\n    setSelectedRecipeId(newRecipe.id);\n    setRecipes([...recipes, newRecipe]);\n  }\n\n  // Return all recipes expect the one we matched\n  function handleRecipeDelete(id) {\n    if (selectedRecipeId != null && selectedRecipeId === id)\n      setRecipes(recipes.filter((recipe) => recipe.id !== id));\n  }\n\n  return (\n    <RecipeContext.Provider value={recipeContextValue}>\n      <RecipeList recipes={recipes} />\n      {selectedRecipe && <RecipeEdit recipe={selectedRecipe} />}\n      {/* {selectedRecipe ? <RecipeEdit recipe={selectedRecipe} /> : null} */}\n    </RecipeContext.Provider>\n  );\n}\n\nconst sampleRecipes = [\n  {\n    id: 1,\n    name: \"Plain Chicken\",\n    servings: 3,\n    cookTime: \"1:45\",\n    instructions:\n      \"1. Put salt on chicken\\n2. Put chicken in oven\\n3. Eat chicken\",\n    ingredients: [\n      {\n        id: 1,\n        name: \"Chicken\",\n        amount: \"2 Pounds\",\n      },\n      {\n        id: 2,\n        name: \"Salt\",\n        amount: \"1 Tbs\",\n      },\n    ],\n  },\n  {\n    id: 2,\n    name: \"Plain Pork\",\n    servings: 5,\n    cookTime: \"0:45\",\n    instructions: \"1. Put paprika on pork\\n2. Put pork in oven\\n3. Eat pork\",\n    ingredients: [\n      {\n        id: 1,\n        name: \"Pork\",\n        amount: \"3 Pounds\",\n      },\n      {\n        id: 2,\n        name: \"Paprika\",\n        amount: \"2 Tbs\",\n      },\n    ],\n  },\n];\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}